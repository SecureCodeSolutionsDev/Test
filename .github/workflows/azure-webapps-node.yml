# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const inputFile = '/storage/emulated/0/MT2/apks/dump.txt';
const splitDir = '/data/data/com.termux/files/home';
const outputDir = path.join(splitDir, 'organized');

// Create output directory if it doesn't exist
if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
}

// Split the file into chunks of 5MB
execSync(`split -b 5m --additional-suffix=.txt "${inputFile}" "${splitDir}/dump_part_"`);

// Define target values
const valueSpeed = "speed";
const valueDamage = "damage";

// Function to decode file content for various encodings
function decodeFile(filePath) {
    const decodedFilePath = `${filePath}.decoded`;
    try {
        // Base64 decoding
        execSync(`base64 --decode "${filePath}" > "${decodedFilePath}"`);
        fs.renameSync(decodedFilePath, filePath);
        return;
    } catch {}

    // Additional decoding methods can be added here...

    console.log(`No decoding applied for ${filePath}`);
}

// Loop through each split file
fs.readdirSync(splitDir).forEach(file => {
    if (file.startsWith('dump_part_') && file.endsWith('.txt')) {
        const filePath = path.join(splitDir, file);
        decodeFile(filePath);

        const hasSpeed = fs.readFileSync(filePath, 'utf8').includes(valueSpeed);
        const hasDamage = fs.readFileSync(filePath, 'utf8').includes(valueDamage);

        let folderName;
        if (hasSpeed && hasDamage) folderName = "speed_and_damage";
        else if (hasSpeed) folderName = "speed";
        else if (hasDamage) folderName = "damage";
        else folderName = "Others_no_targeted_values_found";

        const targetDir = path.join(outputDir, folderName);
        if (!fs.existsSync(targetDir)) {
            fs.mkdirSync(targetDir, { recursive: true });
        }
        
        fs.renameSync(filePath, path.join(targetDir, file));
    }
});

// Generate classes.txt for each folder
fs.readdirSync(outputDir).forEach(folder => {
    const folderPath = path.join(outputDir, folder);
    if (fs.lstatSync(folderPath).isDirectory()) {
        const classesFile = path.join(folderPath, 'classes.txt');
        fs.writeFileSync(classesFile, '');

        fs.readdirSync(folderPath).forEach(file => {
            if (file.endsWith('.txt')) {
                const content = fs.readFileSync(path.join(folderPath, file), 'utf8');
                const classNames = content.match(/class \w+/g) || [];
                classNames.forEach(className => {
                    fs.appendFileSync(classesFile, className.replace('class ', '') + '\n');
                });
            }
        });

        // Remove duplicates and sort
        const uniqueClasses = [...new Set(fs.readFileSync(classesFile, 'utf8').split('\n'))].filter(Boolean);
        fs.writeFileSync(classesFile, uniqueClasses.sort().join('\n'));
    }
});

console.log("Files have been split, organized, and class names collected successfully!");
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
